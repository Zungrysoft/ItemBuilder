======================================
Sword That Grants +15% Speed When Held
======================================
# Formatted
/give @s stone_sword{
	ItemBuilderMainhand: {
		Effects: [
			{Id: 101, Value: 15}
		]
	}
}

# Inline
/give @s stone_sword{ItemBuilderMainhand: {Effects: [{Id: 101, Value: 15}]}}

# Notes: The Id key determines which effect you will get. (See id_list.txt for a list of available ids). The Value key determines certain qualities of the effect. For this effect, it sets the percent increase of the player's speed. The base-level keys for the different slots are ItemBuilderMainhand, ItemBuilderOffhand, ItemBuilderEitherHand, and ItemBuilderArmor.


=========================================================
Chestplate That Grants +2 Damage and +10% Speed When Worn
=========================================================
# Formatted
/give @s chainmail_chestplate{
	ItemBuilderArmor: {
		Effects: [
			{Id: 100, Value: 2},
			{Id: 101, Value: 10}
		]
	}
}

# Inline
/give @s chainmail_chestplate{ItemBuilderArmor: {Effects: [{Id: 100, Value: 2},{Id: 101, Value: 10}]}}

# Notes: You can put multiple effects in the list. They will be executed in order.


=================================================
Axe That Grants +50 Attack Damage When Underwater
=================================================
# Formatted
/give @s iron_axe{
	ItemBuilderMainhand: {
		Conditions: [
			{
				Id: 381,
				Effects: [
					{Id: 100, Value: 50}
				]
			}
		]
	}
}

# Inline
/give @s iron_axe{ItemBuilderMainhand: {Conditions: [{Id: 381,Effects: [{Id: 100, Value: 50}]}]}}

# Notes: Conditions can be used to make effects only happen under certain circumstances. The Id key will determine the condition that must be satisfied to run the effects inside of it. (See id_list.txt for a list of ids.)


=====================================================
Axe That Grants +50 Attack Damage When NOT Underwater
=====================================================
# Formatted
/give @s iron_axe{
	ItemBuilderMainhand: {
		Conditions: [
			{
				Id: 381,
				Inverted: 1,
				Effects: [
					{Id: 100, Value: 50}
				]
			}
		]
	}
}

# Inline
/give @s iron_axe{ItemBuilderMainhand: {Conditions: [{Id: 381,Inverted: 1,Effects: [{Id: 100, Value: 50}]}]}}

# Notes: Use the Inverted key to swap true and false for the condition. Aside from the Inverted key, this item is identical to the one above, but has the exact opposite effect.


================================================================
Offhand Item That Grants +10% Speed When at 13 XP Levels or More
================================================================
# Formatted
/give @s raw_copper{
	ItemBuilderOffhand: {
		Conditions: [
			{
				Id: 302,
				Value: 13,
				Effects: [
					{Id: 101, Value: 10}
				]
			}
		]
	}
}

# Inline
/give @s raw_copper{ItemBuilderOffhand: {Conditions: [{Id: 302,Value: 13,Effects: [{Id: 101, Value: 10}]}]}}

# Notes: Some conditions have Value keys. For this condition, it sets the number of levels required to satisfy the condition.


==========================================================
Helmet That Grants +80% Speed When on Fire And Eating Food
==========================================================
# Formatted
/give @s golden_helmet{
	ItemBuilderArmor: {
		Conditions: [
			{
				Id: 380,
				Conditions: [
					{
						Id: 220,
						Effects: [
							{Id: 101, Value: 80}
						]
					}
				]
			}
		]
	}
}

# Inline
/give @s golden_helmet{ItemBuilderArmor: {Conditions: [{Id: 380,Conditions: [{Id: 220,Value: 2,Effects: [{Id: 101, Value: 80}]}]}]}}

# Notes: You can put conditions inside other conditions. This allows you to require multiple conditions to get an effect.


====================================
Sword That Grants Resistance on Kill
====================================
# Formatted
/give @s stone_sword{
	ItemBuilderMainhand: {
		Conditions: [
			{
				Id: 120,
				Effects: [
					{Id: 200, Value:20, Value2: 3}
				]
			}
		]
	}
}

# Inline
/give @s stone_sword{ItemBuilderMainhand: {Conditions: [{Id: 120,Effects: [{Id: 200, Value:20, Value2: 3}]}]}}

# Notes: Some conditions and effects are "instantaneous". (Marked with an * in id_list.txt) For conditions, this means the condition will only be active for one frame. Things like "Player Killed a Mob". This will only be active the frame after you got the kill. Then there are instantaneous effects, which are designed to be used with instantaneous conditions. Things like "Gain Resistance for the next 10 seconds". There is nothing stopping you from using instantaneous conditions with passive effects and vice-versa, but the item may not make a lot of sense. Use your own judgement.


=================================
Boots That Set Fire to the Ground
=================================
# Formatted
/give @s chainmail_boots{
	ItemBuilderArmor: {
		Effects: [
			{Id: 501, Value: 1, NoSound: 1}
		]
	}
}

# Inline
/give @s chainmail_boots{ItemBuilderArmor: {Effects: [{Id: 501, Value: 1, NoSound: 1}]}}

# Notes: There are built in sound and particle effects on many of these Effects. There may be situations where you want to disable them, however. You can use the NoSound tag on an effect to accomplish that.


=========================================
Sword That Activates Upon Killing a Witch
    Once Activated, Grants +30% Speed
=========================================
# Formatted
/give @s diamond_sword{
	ItemBuilderMainhand: {
		Conditions: [
			{
				Id: 121,
				Value: 8,
				Effects: [
					{Id: 875}
				]
			},
			{
				Id: 875,
				Effects: [
					{Id: 101, Value: 30}
				]
			}
		]
	}
}

# Inline
/give @s diamond_sword{ItemBuilderMainhand: {Conditions: [{Id: 121, Value: 8,Effects: [{Id: 875}]},{Id: 875,Effects: [{Id: 101, Value: 30}]}]}}

# Notes: Activations allow you to make the player work for their custom effects! The first condition activates the sword upon killing the witch. The second condition grants speed, but only after the sword has been activated. Activating an item for the first time gives the item a special lore text, plays a sound effect, and prints a chat message to the player.


===============================================================
Boots That Grant 50% Knockback Resistance For 3 Seconds on Kill
===============================================================
# Formatted
/give @s diamond_boots{
	ItemBuilderArmor: {
		Conditions: [
			{
				Id: 120,
				Effects: [
					{Id: 870, Value: 60}
				]
			},
			{
				Id: 870,
				Effects: [
					{Id: 105, Value: 50},
					{Id: 900, Value: 180}
				]
			}
		]
	}
}

# Inline
/give @s diamond_boots{ItemBuilderArmor: {Conditions: [{Id: 120,Effects: [{Id: 870, Value: 60}]},{Id: 870,Effects: [{Id: 105, Value: 50},{Id: 900, Value: 180}]}]}}

# Notes: Priming an item allows you to grant a passive effect to the player for a controlled duration. The first condition on this item sets the item to be primed for 3 seconds on kill. The second condition grants knockback resistance while it is primed.


====================================================
Staff That Kills Monsters That Have 5 Health or Less
====================================================
# Formatted
/give @s carrot_on_a_stick{
	ItemBuilderEitherHand: {
		Conditions:[
			{
				Id:902,
				Filters: [
					{
						Id:120,
						Value:5,
						Conditions: [
							{
								Id:300,
								Value:6,
								Inverted:1,
								Effects: [
									{Id:910}
								]
							}
						]
					}
				]
			}
		]
	}
}

# Inline
/give @s minecraft:carrot_on_a_stick{ItemBuilderEitherHand:{Conditions:[{Id:902,Filters:[{Id:120,Value:5,Conditions:[{Id:300,Value:6,Inverted:1,Effects:[{Id:910}]}]}]}]}}

# Notes: Filters allow you to affect and make checks against monsters, among other things. First, the item (a Carrot on a Stick) checks if you've used it. If so, then run a filter that affects all monsters within a radius of 5 blocks. For each of those monsters, it will check the condition that tests how much health it has. It doesn't check against the player's health, it checks against the monster's health because the condition falls inside the filter. Each monster for whom the condition is true will execute the effect, which also is on the monster instead of the player. Thus, the monster is killed if it has five health or less.

=========================================================================
Leggings that Grant +60% Speed if There Are Three Burning Monsters Nearby
=========================================================================
# Formatted
/give @s diamond_leggings{
	ItemBuilderArmor: {
		Conditions: [
			{
				Id: 0,
				Filters: [
					{
						Id: 120,
						Value: 8,
						Conditions: [
							{
								Id: 380,
								Effects: [
									{Id: 841, Value: 1}
								]
							}
						]
					}
				]
			},
			{
				Id: 841,
				Value: 3,
				Effects: [
					{Id: 101, Value: 60}
				]
			}
		]
	}
}

# Inline
/give @s diamond_leggings{ItemBuilderArmor: {Conditions: [{Id: 0,Filters: [{Id: 120,Value: 8,Conditions: [{Id: 380,Effects: [{Id: 841, Value: 1}]}]}]},{Id: 841,Value: 3,Effects: [{Id: 101, Value: 60}]}]}}

# Notes: This uses filters and FrameCounters together to create an item that counts nearby monsters that have certain properties. The first part goes through each nearby monster and checks if it's on fire. If it is, it increments the FrameCounter by one. (FrameCounters are counters that can be added to or subtracted from, but are reset to 0 at the beginning of the frame. So it's useful for logic like this, but not for storing data permanently.) If three monsters are found to be on fire, the FrameCounter will be incremented three times. The second part checks if the FrameCounter was incremented to at least three and grants the effect. One more thing to note is the Condition with Id 0. Condition 0 means "always true", so it really does nothing. Its purpose is to allow us to manage the order between the Filter inside it and the Condition below it. ItemBuilder always executes Effects, then Conditions, then Filters, but you can rearrange Conditions with each other. We need the Filter to be run before the Condition below, so we use this "Container" Condition to put the Filter inside, which can be rearranged with the other Condition to whichever order we choose.

